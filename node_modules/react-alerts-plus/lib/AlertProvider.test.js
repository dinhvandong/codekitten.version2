"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _testUtils = require("test-utils");

require("@testing-library/jest-dom/extend-expect");

var _AlertWrapper = _interopRequireDefault(require("./AlertWrapper"));

var _alertMocks = _interopRequireDefault(require("./__mocks__/alert-mocks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable import/no-unresolved */
var MyButton = function MyButton(_ref) {
  var onClick = _ref.onClick,
      name = _ref.name;
  return _react["default"].createElement("button", {
    type: "button",
    "data-testid": name,
    onClick: onClick
  }, name);
};

MyButton.propTypes = {
  onClick: _propTypes["default"].func.isRequired,
  name: _propTypes["default"].string.isRequired
};
afterEach(_testUtils.cleanup);
describe('Default Alerts:', function () {
  it('top left', function () {
    var _render = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref2) {
      var show = _ref2.show,
          close = _ref2.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].topLeft);
        },
        name: "top left"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-top-left');
        }
      }, "close"));
    })),
        getByText = _render.getByText,
        getByTestId = _render.getByTestId,
        queryByTestId = _render.queryByTestId;

    _testUtils.fireEvent.click(getByText('top left'));

    expect(getByTestId(_alertMocks["default"].topLeft.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].topLeft.id)).toBeFalsy();
  });
  it('top left dark', function () {
    var _render2 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref3) {
      var show = _ref3.show,
          close = _ref3.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].topLeftDark);
        },
        name: "top left"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-top-left-dark');
        }
      }, "close"));
    })),
        getByText = _render2.getByText,
        getByTestId = _render2.getByTestId,
        queryByTestId = _render2.queryByTestId;

    _testUtils.fireEvent.click(getByText('top left'));

    expect(getByTestId(_alertMocks["default"].topLeftDark.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].topLeftDark.id)).toBeFalsy();
  });
  it('top left duration zero', function () {
    var _render3 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref4) {
      var show = _ref4.show,
          close = _ref4.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].topLeftDurationZero);
        },
        name: "top left"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-top-left-duration-zero');
        }
      }, "close"));
    })),
        getByText = _render3.getByText,
        getByTestId = _render3.getByTestId,
        queryByTestId = _render3.queryByTestId;

    _testUtils.fireEvent.click(getByText('top left'));

    expect(getByTestId(_alertMocks["default"].topLeftDurationZero.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].topLeftDurationZero.id)).toBeFalsy();
  });
  it('top center', function () {
    var _render4 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref5) {
      var show = _ref5.show,
          close = _ref5.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].topCenter);
        },
        name: "top center"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-top-center');
        }
      }, "close"));
    })),
        getByText = _render4.getByText,
        getByTestId = _render4.getByTestId,
        queryByTestId = _render4.queryByTestId;

    _testUtils.fireEvent.click(getByText('top center'));

    expect(getByTestId(_alertMocks["default"].topCenter.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].topCenter.id)).toBeFalsy();
  });
  it('top right', function () {
    var _render5 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref6) {
      var show = _ref6.show,
          close = _ref6.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].topRight);
        },
        name: "top right"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-top-right');
        }
      }, "close"));
    })),
        getByText = _render5.getByText,
        getByTestId = _render5.getByTestId,
        queryByTestId = _render5.queryByTestId;

    _testUtils.fireEvent.click(getByText('top right'));

    expect(getByTestId(_alertMocks["default"].topRight.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].topRight.id)).toBeFalsy();
  });
  it('bottom left', function () {
    var _render6 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref7) {
      var show = _ref7.show,
          close = _ref7.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].bottomLeft);
        },
        name: "bottom left"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-bottom-left');
        }
      }, "close"));
    })),
        getByText = _render6.getByText,
        getByTestId = _render6.getByTestId,
        queryByTestId = _render6.queryByTestId;

    _testUtils.fireEvent.click(getByText('bottom left'));

    expect(getByTestId(_alertMocks["default"].bottomLeft.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].bottomLeft.id)).toBeFalsy();
  });
  it('bottom center', function () {
    var _render7 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref8) {
      var show = _ref8.show,
          close = _ref8.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].bottomCenter);
        },
        name: "bottom center"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-bottom-center');
        }
      }, "close"));
    })),
        getByText = _render7.getByText,
        getByTestId = _render7.getByTestId,
        queryByTestId = _render7.queryByTestId;

    _testUtils.fireEvent.click(getByText('bottom center'));

    expect(getByTestId(_alertMocks["default"].bottomCenter.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].bottomCenter.id)).toBeFalsy();
  });
  it('bottom right', function () {
    var _render8 = (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref9) {
      var show = _ref9.show,
          close = _ref9.close;
      return _react["default"].createElement("div", null, _react["default"].createElement(MyButton, {
        onClick: function onClick() {
          return show(_alertMocks["default"].bottomRight);
        },
        name: "bottom right"
      }), _react["default"].createElement("button", {
        type: "button",
        onClick: function onClick() {
          return close('test-alert-bottom-right');
        }
      }, "close"));
    })),
        getByText = _render8.getByText,
        getByTestId = _render8.getByTestId,
        queryByTestId = _render8.queryByTestId;

    _testUtils.fireEvent.click(getByText('bottom right'));

    expect(getByTestId(_alertMocks["default"].bottomRight.id)).toBeTruthy();

    _testUtils.fireEvent.click(getByText('close'));

    expect(queryByTestId(_alertMocks["default"].bottomRight.id)).toBeFalsy();
  });
  it('failure invalid postion', function () {
    expect.hasAssertions();
    (0, _testUtils.render)(_react["default"].createElement(_AlertWrapper["default"], null, function (_ref10) {
      var show = _ref10.show;
      expect(function () {
        return show(_alertMocks["default"].invalidPosition);
      }).toThrowError('Invalid position prop invalid position');
      return null;
    }));
  });
});